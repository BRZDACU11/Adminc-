#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <limits>

using namespace std;

const string ADMIN_PASSWORD = "PPMRJ"; // Has≈Ço administratora

struct Student {
    int id;
    string imie;
    string nazwisko;
    string plec;
    int wiek;
    string miejscowosc;
    int numer_albumu;
    string kierunek;
};

// Baza u≈ºytkownik√≥w (login -> has≈Ço)
map<string, string> userTable;
// Baza student√≥w
vector<Student> bazaStudentow;

class BazaDanych {
public:
    void addRecord(int id, const string& imie, const string& nazwisko, const string& plec, int wiek, const string& miejscowosc, int numer_albumu, const string& kierunek) {
        bazaStudentow.push_back({id, imie, nazwisko, plec, wiek, miejscowosc, numer_albumu, kierunek});
    }

    vector<Student> searchById(int id) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.id == id) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByName(const string& imie) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.imie.find(imie) != string::npos) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByNazwisko(const string& nazwisko) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.nazwisko.find(nazwisko) != string::npos) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByPlec(const string& plec) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.plec == plec) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByWiek(int wiek) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.wiek == wiek) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByMiejscowosc(const string& miejscowosc) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.miejscowosc.find(miejscowosc) != string::npos) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByNumerAlbumu(int numer_albumu) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.numer_albumu == numer_albumu) {
                result.push_back(record);
            }
        }
        return result;
    }

    vector<Student> searchByKierunek(const string& kierunek) const {
        vector<Student> result;
        for (const auto& record : bazaStudentow) {
            if (record.kierunek.find(kierunek) != string::npos) {
                result.push_back(record);
            }
        }
        return result;
    }
    
    void printResults(const vector<Student>& results) const {
        for (const auto& record : results) {
            cout << "ID: " << record.id << ", Imiƒô: " << record.imie << ", Nazwisko: " << record.nazwisko 
                 << ", P≈Çeƒá: " << record.plec << ", Wiek: " << record.wiek << ", Miejscowo≈õƒá: " << record.miejscowosc 
                 << ", Numer albumu: " << record.numer_albumu << ", Kierunek: " << record.kierunek << '\n';
        }
    }

 

    void chooseSearchMethod() const {
        int method;
        cout << "Wybierz metodƒô wyszukiwania (1 - imiƒô, 2 - nazwisko, 3 - p≈Çeƒá, 4 - miejscowo≈õƒá, 5 - kierunek, 6 - id, 7 - wiek, 8 - numer albumu): ";
        cin >> method;
        cin.ignore(); // ignoruje znak nowej linii po wprowadzeniu metody

        if (method >= 1 && method <= 5) {
            string criteria;
            cout << "Wprowad≈∫ kryteria do wyszukania: ";
            getline(cin, criteria);
            searchAndPrint(criteria, method);
        } else if (method >= 6 && method <= 8) {
            int criteria;
            cout << "Wprowad≈∫ kryteria do wyszukania: ";
            cin >> criteria;
            searchAndPrint(criteria, method - 5);
        } else {
            cout << "Niew≈Ça≈õciwa metoda wyszukiwania.\n";
        }
    }

    void searchAndPrint(const string& criteria, int method) const {
        vector<Student> results;
        switch (method) {
            case 1:
                results = searchByName(criteria);
                break;
            case 2:
                results = searchByNazwisko(criteria);
                break;
            case 3:
                results = searchByPlec(criteria);
                break;
            case 4:
                results = searchByMiejscowosc(criteria);
                break;
            case 5:
                results = searchByKierunek(criteria);
                break;
            default:
                cout << "Niew≈Ça≈õciwa metoda wyszukiwania.\n";
                return;
        }
        printResults(results);
    }

    void searchAndPrint(int criteria, int method) const {
        vector<Student> results;
        switch (method) {
            case 1:
                results = searchById(criteria);
                break;
            case 2:
                results = searchByWiek(criteria);
                break;
            case 3:
                results = searchByNumerAlbumu(criteria);
                break;
            default:
                cout << "Niew≈Ça≈õciwa metoda wyszukiwania.\n";
                return;
        }
        printResults(results);
    }
};

// Rejestracja u≈ºytkownika (chroniona has≈Çem administratora)
void signup() {
    string adminPass;
    cout << "üîí Podaj has≈Ço administratora: ";
    cin >> adminPass;

    if (adminPass != ADMIN_PASSWORD) {
        cout << "‚ùå Niepoprawne has≈Ço! Dostƒôp zabroniony.\n";
        return; // Przerywamy rejestracjƒô
    } else {
        cout << "‚úÖ Has≈Ço poprawne.\n";
    }

    string login, haslo;
    cout << "üìù Podaj login dla nowego u≈ºytkownika: ";
    cin >> login;
    cout << "üîë Podaj has≈Ço dla nowego u≈ºytkownika: ";
    cin >> haslo;

    if (userTable.find(login) == userTable.end()) {
        userTable[login] = haslo;
        cout << "‚úÖ U≈ºytkownik '" << login << "' zosta≈Ç zarejestrowany pomy≈õlnie!\n";
    } else {
        cout << "‚ö†Ô∏è U≈ºytkownik ju≈º istnieje!\n";
    }
}

// Logowanie u≈ºytkownika
bool login() {
    string login, haslo;
    cout << "üîê Podaj login: ";
    cin >> login;
    cout << "üîë Podaj has≈Ço: ";
    cin >> haslo;

    if (userTable.find(login) != userTable.end() && userTable[login] == haslo) {
        cout << "‚úÖ Zalogowano pomy≈õlnie!\n";
        return true;
    } else {
        cout << "‚ùå Niew≈Ça≈õciwe dane logowania. Spr√≥buj ponownie.\n";
        return false;
    }
}

// Dodawanie studenta
void dodajStudenta() {
    Student nowyStudent;

    cout << "üìå Podaj ID: ";
    cin >> nowyStudent.id;
    cin.ignore();

    cout << "üë§ Podaj Imiƒô: ";
    getline(cin, nowyStudent.imie);

    cout << "üë§ Podaj Nazwisko: ";
    getline(cin, nowyStudent.nazwisko);

    cout << "üöª Podaj P≈Çeƒá: ";
    getline(cin, nowyStudent.plec);

    cout << "üéÇ Podaj Wiek: ";
    cin >> nowyStudent.wiek;
    cin.ignore();

    cout << "üè° Podaj Miejscowo≈õƒá: ";
    getline(cin, nowyStudent.miejscowosc);

    cout << "üÜî Podaj Numer Albumu: ";
    cin >> nowyStudent.numer_albumu;
    cin.ignore();

    cout << "üìñ Podaj Kierunek Studi√≥w: ";
    getline(cin, nowyStudent.kierunek);

    bazaStudentow.push_back(nowyStudent);
    cout << "\n‚úÖ Student zosta≈Ç dodany poprawnie!\n";
}

// Wy≈õwietlanie wszystkich student√≥w
void wyswietlWszystkich() {
    if (bazaStudentow.empty()) {
        cout << "\n‚ö†Ô∏è Brak zapisanych student√≥w.\n";
        return;
    }

    cout << "\nüìã Lista Student√≥w:\n";
    for (const auto& s : bazaStudentow) {
        cout << "-------------------------------------\n";
        cout << "üìå ID: " << s.id << "\nüë§ Imiƒô i Nazwisko: " << s.imie << " " << s.nazwisko
             << "\nüöª P≈Çeƒá: " << s.plec << "\nüéÇ Wiek: " << s.wiek << "\nüè° Miejscowo≈õƒá: " << s.miejscowosc
             << "\nüìñ Kierunek: " << s.kierunek << "\nüÜî Numer Albumu: " << s.numer_albumu << "\n";
    }
    cout << "-------------------------------------\n";
}

int main() {
    int wybor;
    bool zalogowany = false;

    do {
        cout << "\nüìå MENU:\n";
        cout << "1Ô∏è‚É£ Zarejestruj nowego u≈ºytkownika (wymaga has≈Ça administratora)\n";
        cout << "2Ô∏è‚É£ Zaloguj siƒô\n";
        cout << "3Ô∏è‚É£ Wyj≈õcie\n";
        cout << "üü¢ Wyb√≥r: ";
        cin >> wybor;

        if (cin.fail()) {
            cin.clear(); // Czy≈õci stan b≈Çƒôdu
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignoruje niepoprawne wej≈õcie
            cout << "‚ö†Ô∏è Niepoprawny wyb√≥r! Spr√≥buj ponownie.\n";
            continue;
        }

        cin.ignore();

        switch (wybor) {
            case 1:
                signup();
                break;
            case 2:
                zalogowany = login();
                break;
            case 3:
                cout << "üî¥ Zamykanie programu...\n";
                return 0;
            default:
                cout << "‚ö†Ô∏è Niepoprawny wyb√≥r! Spr√≥buj ponownie.\n";
        }
    } while (!zalogowany);

    BazaDanych db;
   

    // Po zalogowaniu u≈ºytkownik ma dostƒôp do bazy student√≥w
    do {
        cout << "\nüìå MENU STUDENT√ìW:\n";
        cout << "1Ô∏è‚É£ Dodaj studenta\n";
        cout << "2Ô∏è‚É£ Wy≈õwietl wszystkich student√≥w\n";
        cout << "3Ô∏è‚É£ Wyszukaj studenta\n";
        cout << "4Ô∏è‚É£ Wyloguj siƒô\n";
        cout << "üü¢ Wyb√≥r: ";
        cin >> wybor;

        if (cin.fail()) {
            cin.clear(); // Czy≈õci stan b≈Çƒôdu
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignoruje niepoprawne wej≈õcie
            cout << "‚ö†Ô∏è Niepoprawny wyb√≥r! Spr√≥buj ponownie.\n";
            continue;
        }

        cin.ignore();

        switch (wybor) {
            case 1:
                dodajStudenta();
                break;
            case 2:
                wyswietlWszystkich();
                break;
            case 3:
                db.chooseSearchMethod();
                break;
            case 4:
                cout << "üîí Wylogowano.\n";
                zalogowany = false;
                break;
            default:
                cout << "‚ö†Ô∏è Niepoprawny wyb√≥r! Spr√≥buj ponownie.\n";
        }
    } while (zalogowany);

    return 0;
}
